<!--
  LIBRARIES USED AS PART OF MY JS / MAP HANDLER:
  Leaflet: http://leafletjs.com/
  OverlappingMarkerSpidifier: https://github.com/jawj/OverlappingMarkerSpiderfier
  Font-Awesome: https://fontawesome.com/
  OpenStreetMaps: https://www.openstreetmap.org/
-->es
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title></title>

  <!-- QWebChannel helps facilitate message passing between JS and Python -->
  <script src="../libs/qwebchannel.js"></script>

  <!-- Load map, heatmap and spidifier JS-->
  <script src="../libs/leaflet-src.js"></script>
  <script src="../libs/heatmap.js"></script>
  <script src="../libs/leaflet-heatmap.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/OverlappingMarkerSpiderfier-Leaflet/0.2.6/oms.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/leaflet-easybutton@2/src/easy-button.js"></script>

  <!-- Set-up CSS for Leaflet (map interface) -->
  <link rel="stylesheet" href="../libs/leaflet.css" />

  <!-- Set-up CSS-->
  <style>
    body, html { margin:0; padding:0; height:100%;}
    body { font-family:sans-serif; }
    body * { font-weight:200;}
    #map { height:100%; }
    .leaflet-container {
      background: rgba(0,0,0,.8) !important;
    }
    .leaflet-zoom-hide { position: absolute!important; }
    #all-examples-info { position:absolute; background:white; font-size:16px; padding:20px; top:100px; width:350px; line-height:150%; border:1px solid rgba(0,0,0,.2);}
  </style>

  <!-- Buttons and Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet-easybutton@2/src/easy-button.css">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
</head>

<body>
 <!-- Create DIV container for showing the map -->
  <div id="map"></div>
  <script>
      // Create data structures for storing markers, titles
      var map;
      var queryArray = [];
      var titleArray = [];

      // Stores marker icons and the current index for iterating through them
      var colourIndex = 0;
      var markerIcons = [];

      // Store previously selected marker to revert colour changes
      var previouslySelectedMarker = null;

      // Declare buttons for heatmap options (increasing, decreases opacity)
      var heatmapGradIncreaseBtn;
      var heatmapGradDecreaseBtn;
      // JSON config for heatmaps
      var cfg = {
        "radius": 1,
        "scaleRadius": true,
        "useLocalExtrema": false,
        latField: 'lat',
        lngField: 'lng',
        valueField: 'weight',
        opacity: 0.4
      };

      // On a click, we do not want to change web page
      function onClick(e) {return;}

      // Takes an ID, and toggles that layers markers visible / non-visible.
      function toggleMarkersVisible(ID) {
        if (queryArray[ID].toggleMarkers) {
          map.removeLayer(queryArray[ID].markersRef)
        }
        else {
          map.addLayer(queryArray[ID].markersRef)
        }
        queryArray[ID].toggleMarkers = !queryArray[ID].toggleMarkers
      }

      // Takes an ID, and toggles that heatmap visible / non-visible.
      function toggleHeatmapVisible(ID) {
        if (queryArray[ID].toggleHeatmap) {
          queryArray[ID].heatmapRef.setData({data:[]});
        }
        else {
          queryArray[ID].heatmapRef.setData({data: queryArray[ID].heatmapData});
        }
        queryArray[ID].toggleHeatmap = !queryArray[ID].toggleHeatmap
      }

      // Adds a single marker to the default marker scheme and heatmap.
      function addPoint(lat, lng, weight, ID, title) {
        // Add to data structure
        titleArray.push(title);
        queryArray[ID].markersData.push(L.marker([lat, lng], {icon: markerIcons[colourIndex], title: title}).on('click', onClick));
        queryArray[ID].heatmapData.push({
          lat: lat,
          lng: lng,
          weight: weight
        });

        // Add to spidifier
        queryArray[ID].oms.addMarker(queryArray[ID].markersData[queryArray[ID].markersData.length - 1]);

        // Create pop-up and bind to the marker
        queryArray[ID].infoBox.push(title)
      }

      // Moves the marker focus on the screen
      function changeMarkerFocus(index) {
        // Close previous pop-up
        map.closePopup();

        // Find marker matching this title
        matchingMarkers = queryArray[0].markersData.filter(function(e) { return e.options.title === index; });
        if (matchingMarkers.length > 0) {
          // Get matching marker reference
          index = queryArray[0].markersData.indexOf(matchingMarkers[0]);

          // Pan to that icon
          map.panTo(queryArray[0].markersData[index].getLatLng());

          // Set blue icon
          queryArray[0].markersData[index].setIcon(markerIcons[1]);

          // Open popup
          getGeographicalData(queryArray[0].markersData[index]);
        }
      }

      // Post-processing after all data has been added to the map data-set.
      function onFinishQuery(ID) {
        queryArray[ID].toggleHeatmap = false;
        queryArray[ID].toggleMarkers = true;

        // Convert array to LayerGroup
        queryArray[ID].markersRef = L.layerGroup(queryArray[ID].markersData);

        // Convert heatmap array to layer
        queryArray[ID].heatmapRef = new HeatmapOverlay(cfg);
        queryArray[ID].heatmapRef.setData({data: []}) //{data: queryArray[ID].heatmapData});
        queryArray[ID].markersRef.addTo(map);
        queryArray[ID].heatmapRef.addTo(map);

        // Add tile layer to map
        L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

        // Add button for toggling heat-map visibility
        L.easyButton({
          states: [{
            stateName: 'toggle-heatmap',
            icon:      'fa-circle',
            title:     'Toggle heatmap visibility',
            onClick: function(btn, map) {
                toggleHeatmapVisible(0);
            }
          }]
        }).addTo(map);

        // Add button for toggling marker visibility
        L.easyButton({
          states: [{
            stateName: 'toggle-map',
            icon:      'fa-map-marker',
            title:     'Toggle marker visibility',
            onClick: function(btn, map) {
                toggleMarkersVisible(0);
            }
          }]
        }).addTo(map);

        // Increment colour index (so that overlapping marker sets have different colours)
        colourIndex = colourIndex + 1;

        // Store raw latitude and longitude data
        // This may look crude, but the map operator is slow, so we use a FOR loop
        var latLngArray = [];
        for(var i = 0; i < queryArray[0].markersData.length; i++){
           latLngArray.push(queryArray[0].markersData[i]._latlng);
        }

        // Fit the map to the bounds of the results        
        map.fitBounds(latLngArray);
      }

      // Retrieves icons of various colour for use in the map.
      function getIcons() {
        colours = ['green', 'blue', 'red', 'orange', 'purple', 'black', 'violet', 'grey']

        for (var index = 0; index < colours.length; index++) {
          markerIcons[index] = new L.Icon({
            iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-' + colours[index] + '.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
          });
        }
      }

      // Captures a click event, finds the href references in the target tag and then prevents redirects.
      function interceptClickEvent(e) {
        // Prevent page from re-directing to "link"
        e.preventDefault();

        var href;
        var target = e.target || e.srcElement;
        if (target.tagName === 'A') {
          // If HREF attribute in target
          href = target.getAttribute('href');
          if (true) {
            if (href.indexOf('geoNamesBounds') > -1) {
              var latLngRaw = href.replace('geoNamesBounds(', '').replace(')', '').split(',')
              var southWest = L.latLng(latLngRaw[1], latLngRaw[3]), northEast = L.latLng(latLngRaw[2], latLngRaw[0]);
              var bounds = L.latLngBounds(southWest, northEast);

              // create an orange rectangle
              var rectangle = L.rectangle(bounds, {color: "#ff7800", weight: 1}).addTo(map);
              // zoom the map to the rectangle bounds
              map.fitBounds(bounds);
              map.zoomOut();
            }
            else {
              // Python function call to "mapLinkedClicked"
              var webChannel = new QWebChannel(qt.webChannelTransport, function (channel) {
                window.handler = channel.objects.mapHandler;
                window.handler.mapLinkClicked(titleArray.indexOf(href));
              });
            }
          }
        }
      }

    // Informs the map instance that a new data-set should be created and prepared.
    function newDataSet(ID) {
      // Create data structure for storing this data-set.
      queryArray[ID] = {
        name: ID,
        markersData: [],
        heatmapData: [],
        infoBox: [],
        oms: new OverlappingMarkerSpiderfier(map),
        markersVisible: true,
        heatmapVisible: true
      };

      // Create event listener for pop-ups.
      queryArray[ID].popup = new L.Popup();
      queryArray[ID].oms.addListener('click', getGeographicalData);

      queryArray[ID].oms.addListener('spiderfy', function(markers) {
        map.closePopup();
      });
    }

  function getGeographicalData(marker) {
        // Close any pop-ups currently open
        map.closePopup();

        // Find marker index
        var index = queryArray[0].markersData.indexOf(marker);

        // Reset previous market, set new focus marker
        queryArray[0].markersData[index].setIcon(markerIcons[1]);

        try {
          previouslySelectedMarker.setIcon(markerIcons[0])
        }
        catch (e) {
          console.error();
        }

        previouslySelectedMarker = queryArray[0].markersData[index];

        // If found
        if (index > -1) {
          // Python function call to map_tracklist_popup
          var webChannel = new QWebChannel(qt.webChannelTransport, function (channel) {
            window.handler = channel.objects.mapHandler;
            window.handler.map_tracklist_popup(index, queryArray[0].infoBox[index]);
          });

          // Move focus of the camera
          queryArray[0].popup.setLatLng(marker.getLatLng());

          // Open pop-up
          queryArray[0].markersData[index].openPopup()
        }
  }

  function setPopup(index, text){
    queryArray[0].markersData[index].bindPopup(text);
    queryArray[0].markersData[index].openPopup()
  }

    // On page load, create the map.
    window.onload = function() {
      // Create our base tile layer (OpenStreetMaps)
      var baseLayer = L.tileLayer(
          'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{
          attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://cloudmade.com">CloudMade</a>',
          minZoom: 2
        }
      );

      // Initialize map
      map = new L.Map('map', {
        center: new L.LatLng(25.6586, -80.3568),
        zoom: 5,
        layers: [baseLayer],
        minZoom: 2
      });

      // Get icons for later use
      getIcons()
    };

    // Event listeners for link clicks on the map
    if (document.addEventListener) {
      document.addEventListener('click', interceptClickEvent);
    } else if (document.attachEvent) {
      document.attachEvent('onclick', interceptClickEvent);
    }
  </script>
</body>
</html>